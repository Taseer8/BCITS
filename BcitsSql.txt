Sl No1 :  CREATE TABLE EMPLOYEE ( EMP_ID INT PRIMARY KEY, NAME VARCHAR(50) NOT NULL, AGE INT ,JAOININGDATE DATE);
ALTER TABEL EMPLOYEE ADD SALARY  DECIMAL;

SL No2:
DROP TABLE TEMPDATA;

SL No3:
CREATE TABLE PRODUCTS (PRODUCT_ID INT  PRIMARY KEY, PRODUCT_NAME VARCHAR(250) NOT NULL, PRICE DECIMAL , CHECK (PRICE >0));

SL No4:
ALTER TABLE OLDORDERS RENAME TO ARCHIVEDORDERS; 

SL No5 :
CREATE INDEX IDX_CATEGORY ON INVENTORY(CATEGORY);

SL NO6;
INSERT INTO STUDENT ( STUDENTID, STUDENTNAME, AGE , GENDER) VALUES (101, 'ALICE', 20, 'A');

SL No7:
UPDATE RESULT SET GRADE = 'B' WHERE MARKS < 60;

SL No 8:
DELETE FROM ORDERS WHERE STATUS = 'CANCELLED';

SL No 9:
MERGE TABLE AS B 
USING TABLE AS A 
ON B.ID = A.ID
WHERE MATCHED THEN UPDATE SET B.VALUE = A.VALUE 
WHERE NOT MATCHED THEN INSERT(ID, VALUE) VALUES (A.ID, A.VALUE);

SL No10:



SL No11 :
SELECT NAME FROM EMPLOYEE WHERE JOINDATE >'2020-01-01;

SL No12 :
SELECT AVG(SALARY) AS AVERAGESALARY,
MAX(SALARY) AS MAXIMUMSALARY,
MIN(SALARY) AS MINIMUMSALARY,
FROM EMPLOYEE;

SL N0 13 :
SELECT * FROM ORDER WHERE ORDERAOUNT> 1000
AND STATUS = 'DELIVERED';

SL No 14:
SELECT CATEGORY, SUM(QUANTITY) AS TOTALPRODUCTSSOLD FROM SALES GROUP BY CATEGORY;

SL No 15;
SELECT C.NAME , O.ORDER, O.ORDERDATE, O.ORDERAMOUNT FROM CUSTOMER AS C JOIN ORDERS AS O ON C.CUSTOMERID = O.CUSTOMERID;

SL No16
SELECT C.NAME AS CUSTOMERNAME, O.ORDERID, O.ORDERDATE, O.ORDERAMOUNT FROM CUSTOMERS AS C INNER JOIN ORDER AS O ON C.CUSTOMERID = O.CUSTOMERID;

SL No 17:
SELECT C.NAME AS CUSTOMERNAME, O.ORDERID, O.ORDERDATE, O.ORDERAMOUNT FROM CUSTOMERS AS C LEFT JOIN ORDER AS O ON C.CUSTOMERID = O.CUSTOMERID;

SL NO 18: 
SELECT NAME FROM EMPLOYEE WHERE SALARY>( SELECT AVG(SALARY) FROM EMPLOYEE);

SL No 19:
SELECT  O.ORDERID, O.CUSTOMERID, O.ORDERDATE, O.ORDERAMOUNT FROM ORDERS AS O WHERE O.ORDERAMOUNT >( SELECT AVG(O1.ORDERAMOUNT)FROM ORDERS AS O1 WHERE O1.CUSTOMERID = O.CUSTOMERID);

SL No 20:
SELECT C.NAME AS CUSTOMERNAME, O.ORDERID, O.ORDERDATE, P.PRODUCTNAME, P.PRICE FROM CUSTOMERS , P.PRICE FROM CUSTOMERS AS  C JOIN ORDER AS O ON C.CUSTOMERID = O.CUTOMERID JOIN PRODUCT AS P ON O.PRODUCTID = P.PRODUCTID;

SL No21:
START TRANSACTION;

INSERT INTO ACCOUNTS(ACCOUNTID, ACCOUNTNAME, CREAREDDATE) VALUES(101, 'JOHN DOE, NOW());

UPDATE TRANSACTION SET BALANCE = BALANCE + 500
WHERE ACCOUNTID = 101;

IF ROWCOUNT() = 0; THEN ROOLBACK;
ELSE COMMIT;
END IF;

SL NO 22:

START TRANSACTION;

INSERT INTO INVENTORY(PRODUCTID, PRODUCTNAME , QUNTITY, PRICE) VALUES (1001, 'LAPTOP' 50, 100000);

SAVEPOINT STEP1;

UPDATE INVENTORY SET QUNTITY = QUNTITY -10
WHERE PRODUVCTID = 1001;

IF ROW_COUNT() = 0 THEN 
ROLLBACK TO SAVEPOINT STEP1:

SELECT 'UPDAT FAILED . ROLLED BACKE TO STEP1 ' AS ERRORMESSAGE;
ELSE
INSERT INTO INVENTORY(PRODUCTID, PRODUCTNAME , QUNTITY, PRICE) VALUES (1001, 'LAPTOP' 60, 150000);

UPDATE INVENTORY SET PRICE = PRICE * 1.1
WHERE PRODUVCTID = 1001;

COMMIT ;
END IF; 

SL No 23;
LOCK TABLES EMPLOYEE READ;

SL No 24:
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
START TRANSACTION;
COMMIT;

SL No 25:
START  TRANSACTION;

LOCK TABLE ORDER WRITE;

INSERT INTO ORDERS(ORDERID, CUSTOMERID, ORDERDATE, ORDERAMOUNT, STATUS)VALUES(105,201,'2025-03-24',1500, 'PENDING');

UPDATE ORDERS SET STATUS = 'DELIVERED' WHERE ORDERID = 102;
COMMIT ;
UNLOCK TABLES;